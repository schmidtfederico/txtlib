// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// split_sentences
std::vector<std::vector<std::wstring>> split_sentences(const std::vector<std::string>& texts);
RcppExport SEXP _txtlib_split_sentences(SEXP textsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type texts(textsSEXP);
    rcpp_result_gen = Rcpp::wrap(split_sentences(texts));
    return rcpp_result_gen;
END_RCPP
}
// split_words
std::vector<std::vector<std::wstring>> split_words(const std::vector<std::string>& texts, const unsigned long word_mask, const unsigned long non_word_mask, const bool lowercase);
RcppExport SEXP _txtlib_split_words(SEXP textsSEXP, SEXP word_maskSEXP, SEXP non_word_maskSEXP, SEXP lowercaseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type texts(textsSEXP);
    Rcpp::traits::input_parameter< const unsigned long >::type word_mask(word_maskSEXP);
    Rcpp::traits::input_parameter< const unsigned long >::type non_word_mask(non_word_maskSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowercase(lowercaseSEXP);
    rcpp_result_gen = Rcpp::wrap(split_words(texts, word_mask, non_word_mask, lowercase));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_txtlib_split_sentences", (DL_FUNC) &_txtlib_split_sentences, 1},
    {"_txtlib_split_words", (DL_FUNC) &_txtlib_split_words, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_txtlib(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
